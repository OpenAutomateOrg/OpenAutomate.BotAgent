name: BotAgent SonarQube Analysis

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:  # Allow manual triggering

env:
  SONAR_PROJECT_KEY: openautomate-botagent
  SONAR_PROJECT_NAME: openautomate-botagent
  SONAR_HOST_URL: http://sonar.openautomate.me
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository with full history for better SonarQube analysis
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for accurate blame information

      # Step 2: Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Step 3: Setup Java (required for SonarScanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 4: Install SonarQube Scanner
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Add dotnet tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # Step 5: Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/*.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 6: Begin SonarQube analysis with exclusions for UI and Windows-specific components
      # Note: Explicitly disabling test coverage collection
      - name: Begin SonarQube analysis
        run: |
          dotnet sonarscanner begin \
            /k:"$SONAR_PROJECT_KEY" \
            /n:"$SONAR_PROJECT_NAME" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.exclusions="**/bin/**/*,**/obj/**/*,**/OpenAutomate.BotAgent.UI/**/*,**/OpenAutomate.BotAgent.Installer/**/*,**/*.xaml,**/*.xaml.cs,**/Windows/**/*,**/*Tests*/**,**/*Test*/**" \
            /d:sonar.coverage.exclusions="**/*" \
            /d:sonar.cs.opencover.reportsPaths="" \
            /d:sonar.cs.vstest.reportsPaths="" \
            /d:sonar.verbose=true

      # Step 7: Create solution filter for non-UI projects
      - name: Create solution filter for non-UI projects
        run: |
          cat > BotAgent.NonUI.slnf << 'EOF'
          {
            "solution": {
              "path": "OpenAutomate.BotAgent.sln",
              "projects": [
                "OpenAutomate.BotAgent.Service\\OpenAutomate.BotAgent.Service.csproj",
                "OpenAutomate.BotAgent.Common\\OpenAutomate.BotAgent.Common.csproj",
                "OpenAutomate.BotAgent.SDK\\OpenAutomate.BotAgent.SDK.csproj"
              ]
            }
          }
          EOF

      # Step 8: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore BotAgent.NonUI.slnf

      # Step 9: Build the solution (non-UI projects)
      - name: Build solution
        run: dotnet build BotAgent.NonUI.slnf --configuration Release --no-restore

      # Step 10: End SonarQube analysis
      - name: End SonarQube analysis
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for PR decoration 